// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moonman/mbank/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	db "github.com/moonman/mbank/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 *db.CreateAccountParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)
}

// CreateEntry mocks base method.
func (m *MockStore) CreateEntry(arg0 context.Context, arg1 *db.CreateEntryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockStoreMockRecorder) CreateEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockStore)(nil).CreateEntry), arg0, arg1)
}

// CreateTransfer mocks base method.
func (m *MockStore) CreateTransfer(arg0 context.Context, arg1 *db.CreateTransferParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockStoreMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStore)(nil).CreateTransfer), arg0, arg1)
}

// DeleteAccountById mocks base method.
func (m *MockStore) DeleteAccountById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountById indicates an expected call of DeleteAccountById.
func (mr *MockStoreMockRecorder) DeleteAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountById", reflect.TypeOf((*MockStore)(nil).DeleteAccountById), arg0, arg1)
}

// GetAccountById mocks base method.
func (m *MockStore) GetAccountById(arg0 context.Context, arg1 int64) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountById", arg0, arg1)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountById indicates an expected call of GetAccountById.
func (mr *MockStoreMockRecorder) GetAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountById", reflect.TypeOf((*MockStore)(nil).GetAccountById), arg0, arg1)
}

// GetAccountForUpdate mocks base method.
func (m *MockStore) GetAccountForUpdate(arg0 context.Context, arg1 int64) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountForUpdate", arg0, arg1)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountForUpdate indicates an expected call of GetAccountForUpdate.
func (mr *MockStoreMockRecorder) GetAccountForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountForUpdate", reflect.TypeOf((*MockStore)(nil).GetAccountForUpdate), arg0, arg1)
}

// GetEntriesByAccountId mocks base method.
func (m *MockStore) GetEntriesByAccountId(arg0 context.Context, arg1 int64) ([]*db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesByAccountId", arg0, arg1)
	ret0, _ := ret[0].([]*db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntriesByAccountId indicates an expected call of GetEntriesByAccountId.
func (mr *MockStoreMockRecorder) GetEntriesByAccountId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesByAccountId", reflect.TypeOf((*MockStore)(nil).GetEntriesByAccountId), arg0, arg1)
}

// GetTransfersByAccountId mocks base method.
func (m *MockStore) GetTransfersByAccountId(arg0 context.Context, arg1 int64) ([]*db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersByAccountId", arg0, arg1)
	ret0, _ := ret[0].([]*db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersByAccountId indicates an expected call of GetTransfersByAccountId.
func (mr *MockStoreMockRecorder) GetTransfersByAccountId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersByAccountId", reflect.TypeOf((*MockStore)(nil).GetTransfersByAccountId), arg0, arg1)
}

// TransferTo mocks base method.
func (m *MockStore) TransferTo(arg0 context.Context, arg1 *db.TransferToParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferTo indicates an expected call of TransferTo.
func (mr *MockStoreMockRecorder) TransferTo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTo", reflect.TypeOf((*MockStore)(nil).TransferTo), arg0, arg1)
}

// UpdateAccountById mocks base method.
func (m *MockStore) UpdateAccountById(arg0 context.Context, arg1 *db.UpdateAccountByIdParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountById indicates an expected call of UpdateAccountById.
func (mr *MockStoreMockRecorder) UpdateAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountById", reflect.TypeOf((*MockStore)(nil).UpdateAccountById), arg0, arg1)
}

// UpdateEntryByAccountId mocks base method.
func (m *MockStore) UpdateEntryByAccountId(arg0 context.Context, arg1 *db.UpdateEntryByAccountIdParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntryByAccountId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntryByAccountId indicates an expected call of UpdateEntryByAccountId.
func (mr *MockStoreMockRecorder) UpdateEntryByAccountId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntryByAccountId", reflect.TypeOf((*MockStore)(nil).UpdateEntryByAccountId), arg0, arg1)
}

// UpdateTransferByAccountId mocks base method.
func (m *MockStore) UpdateTransferByAccountId(arg0 context.Context, arg1 *db.UpdateTransferByAccountIdParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransferByAccountId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransferByAccountId indicates an expected call of UpdateTransferByAccountId.
func (mr *MockStoreMockRecorder) UpdateTransferByAccountId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransferByAccountId", reflect.TypeOf((*MockStore)(nil).UpdateTransferByAccountId), arg0, arg1)
}

// deleteEntryByTime mocks base method.
func (m *MockStore) deleteEntryByTime(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteEntryByTime", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteEntryByTime indicates an expected call of deleteEntryByTime.
func (mr *MockStoreMockRecorder) deleteEntryByTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteEntryByTime", reflect.TypeOf((*MockStore)(nil).deleteEntryByTime), arg0, arg1)
}

// deleteTransferByTime mocks base method.
func (m *MockStore) deleteTransferByTime(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteTransferByTime", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteTransferByTime indicates an expected call of deleteTransferByTime.
func (mr *MockStoreMockRecorder) deleteTransferByTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteTransferByTime", reflect.TypeOf((*MockStore)(nil).deleteTransferByTime), arg0, arg1)
}

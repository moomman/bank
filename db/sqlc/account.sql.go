// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAccount = `-- name: CreateAccount :execresult
insert into account(owner, balance, currency,created_at)
value(?,?,?,?)
`

type CreateAccountParams struct {
	Owner     string    `json:"owner"`
	Balance   int64     `json:"balance"`
	Currency  string    `json:"currency"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg *CreateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount,
		arg.Owner,
		arg.Balance,
		arg.Currency,
		arg.CreatedAt,
	)
}

const deleteAccountById = `-- name: DeleteAccountById :exec
delete from account
where id = ?
`

func (q *Queries) DeleteAccountById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountById, id)
	return err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, owner, balance, currency, created_at FROM account
WHERE id = ?
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (*Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return &i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
select id, owner, balance, currency, created_at
from account
where id = ?
for update
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (*Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return &i, err
}

const updateAccountById = `-- name: UpdateAccountById :exec
update account
set balance = balance + ?
where id = ?
`

type UpdateAccountByIdParams struct {
	Balance int64 `json:"balance"`
	ID      int64 `json:"id"`
}

func (q *Queries) UpdateAccountById(ctx context.Context, arg *UpdateAccountByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountById, arg.Balance, arg.ID)
	return err
}

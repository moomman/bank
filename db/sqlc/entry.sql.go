// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: entry.sql

package db

import (
	"context"
	"time"
)

const createEntry = `-- name: CreateEntry :exec
insert into entries
(account_id, amount, created_at)
value (?,?,?)
`

type CreateEntryParams struct {
	AccountID int64     `json:"account_id"`
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg *CreateEntryParams) error {
	_, err := q.db.ExecContext(ctx, createEntry, arg.AccountID, arg.Amount, arg.CreatedAt)
	return err
}

const getEntriesByAccountId = `-- name: GetEntriesByAccountId :many
select id, account_id, amount, created_at from entries
where account_id = ?
`

func (q *Queries) GetEntriesByAccountId(ctx context.Context, accountID int64) ([]*Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntriesByAccountId, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntryByAccountId = `-- name: UpdateEntryByAccountId :exec
update entries
set amount = ?
where account_id = ?
`

type UpdateEntryByAccountIdParams struct {
	Amount    int64 `json:"amount"`
	AccountID int64 `json:"account_id"`
}

func (q *Queries) UpdateEntryByAccountId(ctx context.Context, arg *UpdateEntryByAccountIdParams) error {
	_, err := q.db.ExecContext(ctx, updateEntryByAccountId, arg.Amount, arg.AccountID)
	return err
}

const deleteEntryByTime = `-- name: deleteEntryByTime :exec
delete from entries
where created_at < ?
`

func (q *Queries) deleteEntryByTime(ctx context.Context, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, deleteEntryByTime, createdAt)
	return err
}
